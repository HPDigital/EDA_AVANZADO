#!/usr/bin/env python3
"""
Monitor de logs para CAF Dashboard
Monitorea, analiza y alerta sobre eventos en los logs del sistema
"""

import sys
import os
import time
import re
from pathlib import Path
from datetime import datetime, timedelta
from collections import defaultdict, Counter
import json

# Agregar el directorio ra√≠z al path
root_dir = Path(__file__).parent.parent
sys.path.insert(0, str(root_dir))

class LogMonitor:
    """Monitor de logs del sistema"""
    
    def __init__(self, log_dir=None):
        self.log_dir = log_dir or (root_dir / 'logs')
        self.log_dir.mkdir(exist_ok=True)
        self.patterns = {
            'error': re.compile(r'ERROR|CRITICAL|FATAL', re.IGNORECASE),
            'warning': re.compile(r'WARNING|WARN', re.IGNORECASE),
            'info': re.compile(r'INFO', re.IGNORECASE),
            'debug': re.compile(r'DEBUG', re.IGNORECASE),
            'exception': re.compile(r'Exception|Traceback|Error:', re.IGNORECASE),
            'performance': re.compile(r'performance|slow|timeout|memory', re.IGNORECASE),
            'user_action': re.compile(r'user|login|logout|upload|download', re.IGNORECASE),
            'data_processing': re.compile(r'data|processing|analysis|ingestion', re.IGNORECASE)
        }
        self.alert_thresholds = {
            'error_rate': 0.1,  # 10% de errores
            'warning_rate': 0.2,  # 20% de warnings
            'response_time': 5.0,  # 5 segundos
            'memory_usage': 0.8,  # 80% de memoria
            'disk_usage': 0.9  # 90% de disco
        }
    
    def scan_logs(self, hours=24):
        """Escanea logs de las √∫ltimas N horas"""
        print(f"üîç Escaneando logs de las √∫ltimas {hours} horas...")
        
        cutoff_time = datetime.now() - timedelta(hours=hours)
        log_files = list(self.log_dir.glob('*.log'))
        
        if not log_files:
            print("‚ö†Ô∏è No se encontraron archivos de log")
            return {}
        
        results = {
            'total_lines': 0,
            'errors': 0,
            'warnings': 0,
            'info': 0,
            'debug': 0,
            'exceptions': 0,
            'performance_issues': 0,
            'user_actions': 0,
            'data_processing': 0,
            'log_files': len(log_files),
            'time_range': f"{cutoff_time.strftime('%Y-%m-%d %H:%M')} - {datetime.now().strftime('%Y-%m-%d %H:%M')}",
            'details': []
        }
        
        for log_file in log_files:
            file_results = self._analyze_log_file(log_file, cutoff_time)
            self._merge_results(results, file_results)
        
        return results
    
    def _analyze_log_file(self, log_file, cutoff_time):
        """Analiza un archivo de log espec√≠fico"""
        results = {
            'file': log_file.name,
            'lines': 0,
            'errors': 0,
            'warnings': 0,
            'info': 0,
            'debug': 0,
            'exceptions': 0,
            'performance_issues': 0,
            'user_actions': 0,
            'data_processing': 0,
            'recent_errors': [],
            'recent_warnings': []
        }
        
        try:
            with open(log_file, 'r', encoding='utf-8', errors='ignore') as f:
                for line_num, line in enumerate(f, 1):
                    results['lines'] += 1
                    
                    # Verificar si la l√≠nea est√° dentro del rango de tiempo
                    if not self._is_line_in_time_range(line, cutoff_time):
                        continue
                    
                    # Analizar patrones
                    self._analyze_line(line, results, line_num)
        
        except Exception as e:
            print(f"‚ö†Ô∏è Error leyendo {log_file}: {e}")
        
        return results
    
    def _is_line_in_time_range(self, line, cutoff_time):
        """Verifica si una l√≠nea de log est√° dentro del rango de tiempo"""
        # Buscar timestamp en la l√≠nea (formato: YYYY-MM-DD HH:MM:SS)
        timestamp_match = re.search(r'(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})', line)
        if not timestamp_match:
            return True  # Si no hay timestamp, incluir la l√≠nea
        
        try:
            line_time = datetime.strptime(timestamp_match.group(1), '%Y-%m-%d %H:%M:%S')
            return line_time >= cutoff_time
        except ValueError:
            return True  # Si no se puede parsear, incluir la l√≠nea
    
    def _analyze_line(self, line, results, line_num):
        """Analiza una l√≠nea de log espec√≠fica"""
        line_lower = line.lower()
        
        # Contar por nivel de log
        if self.patterns['error'].search(line):
            results['errors'] += 1
            if len(results['recent_errors']) < 10:
                results['recent_errors'].append(f"L√≠nea {line_num}: {line.strip()}")
        
        elif self.patterns['warning'].search(line):
            results['warnings'] += 1
            if len(results['recent_warnings']) < 10:
                results['recent_warnings'].append(f"L√≠nea {line_num}: {line.strip()}")
        
        elif self.patterns['info'].search(line):
            results['info'] += 1
        
        elif self.patterns['debug'].search(line):
            results['debug'] += 1
        
        # Contar por categor√≠a
        if self.patterns['exception'].search(line):
            results['exceptions'] += 1
        
        if self.patterns['performance'].search(line):
            results['performance_issues'] += 1
        
        if self.patterns['user_action'].search(line):
            results['user_actions'] += 1
        
        if self.patterns['data_processing'].search(line):
            results['data_processing'] += 1
    
    def _merge_results(self, main_results, file_results):
        """Combina resultados de archivos individuales"""
        for key in ['total_lines', 'errors', 'warnings', 'info', 'debug', 
                   'exceptions', 'performance_issues', 'user_actions', 'data_processing']:
            main_results[key] += file_results[key]
        
        # Agregar detalles del archivo
        main_results['details'].append({
            'file': file_results['file'],
            'lines': file_results['lines'],
            'errors': file_results['errors'],
            'warnings': file_results['warnings'],
            'recent_errors': file_results['recent_errors'][:5],  # Solo los primeros 5
            'recent_warnings': file_results['recent_warnings'][:5]
        })
    
    def generate_report(self, hours=24):
        """Genera un reporte de an√°lisis de logs"""
        print(f"\nüìä REPORTE DE AN√ÅLISIS DE LOGS - √öltimas {hours} horas")
        print("=" * 60)
        
        results = self.scan_logs(hours)
        
        if not results['total_lines']:
            print("No hay datos de logs para analizar")
            return results
        
        # Resumen general
        print(f"üìÅ Archivos analizados: {results['log_files']}")
        print(f"üìù L√≠neas totales: {results['total_lines']:,}")
        print(f"‚è∞ Per√≠odo: {results['time_range']}")
        print()
        
        # Distribuci√≥n por nivel
        print("üìä DISTRIBUCI√ìN POR NIVEL DE LOG:")
        levels = [
            ('ERROR', results['errors'], '‚ùå'),
            ('WARNING', results['warnings'], '‚ö†Ô∏è'),
            ('INFO', results['info'], '‚ÑπÔ∏è'),
            ('DEBUG', results['debug'], 'üîç')
        ]
        
        for level, count, icon in levels:
            percentage = (count / results['total_lines']) * 100
            print(f"  {icon} {level:8}: {count:6,} ({percentage:5.1f}%)")
        
        print()
        
        # An√°lisis por categor√≠a
        print("üîç AN√ÅLISIS POR CATEGOR√çA:")
        categories = [
            ('Excepciones', results['exceptions'], 'üí•'),
            ('Problemas de rendimiento', results['performance_issues'], 'üêå'),
            ('Acciones de usuario', results['user_actions'], 'üë§'),
            ('Procesamiento de datos', results['data_processing'], 'üìä')
        ]
        
        for category, count, icon in categories:
            print(f"  {icon} {category:25}: {count:6,}")
        
        print()
        
        # Alertas
        self._check_alerts(results)
        
        # Detalles por archivo
        if results['details']:
            print("üìÅ DETALLES POR ARCHIVO:")
            for detail in results['details']:
                if detail['lines'] > 0:
                    print(f"  üìÑ {detail['file']}:")
                    print(f"    L√≠neas: {detail['lines']:,}")
                    print(f"    Errores: {detail['errors']}")
                    print(f"    Warnings: {detail['warnings']}")
                    
                    if detail['recent_errors']:
                        print(f"    √öltimos errores:")
                        for error in detail['recent_errors']:
                            print(f"      ‚Ä¢ {error}")
                    
                    if detail['recent_warnings']:
                        print(f"    √öltimos warnings:")
                        for warning in detail['recent_warnings']:
                            print(f"      ‚Ä¢ {warning}")
                    print()
        
        return results
    
    def _check_alerts(self, results):
        """Verifica alertas basadas en umbrales"""
        print("üö® VERIFICACI√ìN DE ALERTAS:")
        
        alerts = []
        
        # Verificar tasa de errores
        error_rate = results['errors'] / results['total_lines'] if results['total_lines'] > 0 else 0
        if error_rate > self.alert_thresholds['error_rate']:
            alerts.append(f"‚ö†Ô∏è Tasa de errores alta: {error_rate:.1%}")
        
        # Verificar tasa de warnings
        warning_rate = results['warnings'] / results['total_lines'] if results['total_lines'] > 0 else 0
        if warning_rate > self.alert_thresholds['warning_rate']:
            alerts.append(f"‚ö†Ô∏è Tasa de warnings alta: {warning_rate:.1%}")
        
        # Verificar excepciones
        if results['exceptions'] > 10:
            alerts.append(f"üí• Muchas excepciones: {results['exceptions']}")
        
        # Verificar problemas de rendimiento
        if results['performance_issues'] > 5:
            alerts.append(f"üêå Problemas de rendimiento: {results['performance_issues']}")
        
        if alerts:
            for alert in alerts:
                print(f"  {alert}")
        else:
            print("  ‚úÖ Sin alertas cr√≠ticas")
        
        print()
    
    def monitor_realtime(self, log_file=None, interval=5):
        """Monitorea logs en tiempo real"""
        if not log_file:
            log_files = list(self.log_dir.glob('*.log'))
            if not log_files:
                print("‚ùå No se encontraron archivos de log")
                return
            log_file = max(log_files, key=lambda x: x.stat().st_mtime)
        
        print(f"üëÅÔ∏è Monitoreando en tiempo real: {log_file.name}")
        print(f"‚è±Ô∏è Intervalo: {interval} segundos")
        print("Presiona Ctrl+C para detener...")
        print()
        
        try:
            # Obtener tama√±o inicial del archivo
            last_size = log_file.stat().st_size
            
            while True:
                time.sleep(interval)
                
                # Verificar si el archivo ha crecido
                current_size = log_file.stat().st_size
                if current_size > last_size:
                    # Leer nuevas l√≠neas
                    with open(log_file, 'r', encoding='utf-8', errors='ignore') as f:
                        f.seek(last_size)
                        new_lines = f.readlines()
                    
                    # Analizar nuevas l√≠neas
                    for line in new_lines:
                        self._analyze_realtime_line(line)
                    
                    last_size = current_size
                
        except KeyboardInterrupt:
            print("\nüëã Monitoreo detenido")
    
    def _analyze_realtime_line(self, line):
        """Analiza una l√≠nea en tiempo real"""
        timestamp = datetime.now().strftime('%H:%M:%S')
        
        if self.patterns['error'].search(line):
            print(f"‚ùå [{timestamp}] ERROR: {line.strip()}")
        elif self.patterns['warning'].search(line):
            print(f"‚ö†Ô∏è [{timestamp}] WARNING: {line.strip()}")
        elif self.patterns['exception'].search(line):
            print(f"üí• [{timestamp}] EXCEPTION: {line.strip()}")
        elif self.patterns['performance'].search(line):
            print(f"üêå [{timestamp}] PERFORMANCE: {line.strip()}")
    
    def export_analysis(self, results, output_file=None):
        """Exporta an√°lisis a archivo JSON"""
        if not output_file:
            output_file = self.log_dir / f'log_analysis_{datetime.now().strftime("%Y%m%d_%H%M%S")}.json'
        
        # Agregar metadatos
        export_data = {
            'analysis_timestamp': datetime.now().isoformat(),
            'analysis_duration_hours': 24,  # Por defecto
            'results': results
        }
        
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(export_data, f, indent=2, ensure_ascii=False)
        
        print(f"üìÑ An√°lisis exportado a: {output_file}")

def main():
    """Funci√≥n principal del monitor de logs"""
    print("üìä MONITOR DE LOGS - CAF DASHBOARD")
    print("=" * 50)
    
    monitor = LogMonitor()
    
    if len(sys.argv) > 1:
        command = sys.argv[1]
        
        if command == 'scan':
            hours = int(sys.argv[2]) if len(sys.argv) > 2 else 24
            results = monitor.generate_report(hours)
            monitor.export_analysis(results)
        
        elif command == 'monitor':
            interval = int(sys.argv[2]) if len(sys.argv) > 2 else 5
            monitor.monitor_realtime(interval=interval)
        
        else:
            print(f"‚ùå Comando no v√°lido: {command}")
            return 1
    
    else:
        # Modo interactivo
        while True:
            print("\nOpciones disponibles:")
            print("1. Escanear logs (√∫ltimas 24 horas)")
            print("2. Escanear logs (√∫ltimas N horas)")
            print("3. Monitoreo en tiempo real")
            print("4. Exportar an√°lisis")
            print("5. Salir")
            
            try:
                choice = input("\nSelecciona una opci√≥n (1-5): ").strip()
                
                if choice == '1':
                    results = monitor.generate_report(24)
                    monitor.export_analysis(results)
                
                elif choice == '2':
                    hours = int(input("Horas a analizar: "))
                    results = monitor.generate_report(hours)
                    monitor.export_analysis(results)
                
                elif choice == '3':
                    interval = int(input("Intervalo en segundos (default 5): ") or "5")
                    monitor.monitor_realtime(interval=interval)
                
                elif choice == '4':
                    results = monitor.scan_logs(24)
                    monitor.export_analysis(results)
                
                elif choice == '5':
                    print("üëã ¬°Hasta luego!")
                    break
                
                else:
                    print("‚ùå Opci√≥n inv√°lida")
            
            except KeyboardInterrupt:
                print("\nüëã ¬°Hasta luego!")
                break
            except Exception as e:
                print(f"‚ùå Error: {e}")
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
